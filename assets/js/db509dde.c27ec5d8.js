"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[543],{63590:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={},c="Basic Guide",p={unversionedId:"Basic Guide",id:"Basic Guide",isDocsHomePage:!1,title:"Basic Guide",description:"Lets say you wanna add a custom property, method and event to the workspace.",source:"@site/docs/Basic Guide.md",sourceDirName:".",slug:"/Basic Guide",permalink:"/WrapperService/docs/Basic Guide",editUrl:"https://github.com/zxibs/WrapperService/edit/main/docs/Basic Guide.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/WrapperService/docs/intro"}},l=[],d={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-guide"},"Basic Guide"),(0,i.kt)("p",null,"Lets say you wanna add a custom property, method and event to the workspace.\nFirst we need to wrap the workspace."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local WrapperService = require(path.to.WrapperService)\n\nlocal Workspace = WrapperService:Create(workspace)\n")),(0,i.kt)("p",null,"Now we have created a wrapped version of the workspace,\nwe can add properties to them!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Workspace:Add({\n    -- property keys don't need to be strings, but it is recommended to use strings\n    NewString = {\n        Property = \"This is a new property!\"\n    },\n\n    GetNewString = {\n        -- self is the wrapped instance itself\n        Method = function(self)\n            self.GetNewStringCalled:Fire(self.NewString)\n            return self.NewString\n        end\n    },\n\n    GetNewStringCalled = {\n        --[[ \n            We make an empty function here because\n            this doesn't handle firing the signal,\n            the method itself does.\n        ]]\n        Event = function(signal) end\n    }\n})\n")),(0,i.kt)("p",null,"Now we can use them as normal properties!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'print(Workspace.NewString) -- "This is a new property!"\n\nlocal Connection\nConnection = Workspace.GetNewStringCalled:Connect(function(value)\n    print("GetNewString was called:", value)\n    Connection:Disconnect()\nend)\n\nWorkspace:GetNewString() -- The callback above will run when calling this\n')),(0,i.kt)("p",null,"There is still more to explore, go to the API Docs for more information!"))}u.isMDXComponent=!0}}]);