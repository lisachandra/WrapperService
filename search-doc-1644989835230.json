[{"title":"WrapperService","type":0,"sectionRef":"#","url":"api/WrapperService","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#properties","content":" "},{"title":"Instances​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#Instances","content":"&lt;/&gt; WrapperService.Instances: {WrappedInstance&lt;Instance &gt;} A table containing all of the wrapped instances that have been created and not cleaned. "},{"title":"Functions​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#Create","content":"since v1.0.0 &lt;/&gt; WrapperService:Create(Instance: I) → WrappedInstance&lt;I&gt; Creates and returns a new WrappedInstance from the Instance  "},{"title":"Is​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#Is","content":"since v1.0.0 &lt;/&gt; WrapperService:Is(object: any) → ( boolean, string? ) A method for checking if an object is a WrappedInstance, if it is not it will return false and an error message  "},{"title":"GetByIndex​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#GetByIndex","content":"since v1.0.0 &lt;/&gt; WrapperService:GetByIndex(Index: number) → WrappedInstance&lt;Instance &gt; Gets a wrapped instance in WrapperService.Instances from an index  "},{"title":"GetByInstance​","type":1,"pageTitle":"WrapperService","url":"api/WrapperService#GetByInstance","content":"since v1.0.0 &lt;/&gt; WrapperService:GetByInstance(Instance: I) → WrappedInstance&lt;I&gt; Gets a wrapped instance in WrapperService.Instances from an instance "},{"title":"WrappedInstance","type":0,"sectionRef":"#","url":"api/WrappedInstance","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#types","content":" "},{"title":"Properties<I>​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#Properties<I>","content":"&lt;/&gt; type Properties&lt;I&gt; = {[any]: {Property: any} | {Method: ( self: WrappedInstance&lt;I&gt;, ...any? ) → ...any?} | {Event: (Signal: Signal) → ()}} Properties type for WrappedInstance:Add method "},{"title":"Properties​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#properties","content":" "},{"title":"Changed​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#Changed","content":"&lt;/&gt; WrappedInstance.Changed: Signal&lt;any,any,any&gt; A signal that fires when __newindex successfully sets a new value Args: propertyKey: any, lastValue: any, newValue: any note Use :GetPropertyChangedSignal for normal properties  "},{"title":"Called​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#Called","content":"&lt;/&gt; WrappedInstance.Called: Signal&lt;any,...any?&gt; A signal that fires when a function is called from __index Args: methodKey: any, args: ...any? "},{"title":"Functions​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#functions","content":" "},{"title":"Add​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#Add","content":"since v1.0.0 &lt;/&gt; WrappedInstance:Add(Properties: Properties&lt;I&gt;) → () Adds new properties.  "},{"title":"Clean​","type":1,"pageTitle":"WrappedInstance","url":"api/WrappedInstance#Clean","content":"since v1.0.0 &lt;/&gt; WrappedInstance:Clean() → I Makes the wrapped instance unuseable and disconnects all custom signals, This will not destroy the instance itself and not disconnect normal signals. "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/intro","content":"Installation The installation guide is found on the github releases page","keywords":""},{"title":"Basic Guide","type":0,"sectionRef":"#","url":"docs/Basic Guide","content":"Basic Guide Lets say you wanna add a custom property, method and event to the workspace. First we need to wrap the workspace. local WrapperService = require(path.to.WrapperService) local Workspace = WrapperService:Create(workspace) Copy Now we have created a wrapped version of the workspace, we can add properties to them! Workspace:Add({ -- property keys don't need to be strings, but it is recommended to use strings NewString = { Property = &quot;This is a new property!&quot; }, GetNewString = { -- self is the wrapped instance itself Method = function(self) self.GetNewStringCalled:Fire(self.NewString) return self.NewString end }, GetNewStringCalled = { --[[ We make an empty function here because this doesn't handle firing the signal, the method itself does. ]] Event = function(signal) end } }) Copy Now we can use them as normal properties! print(Workspace.NewString) -- &quot;This is a new property!&quot; local Connection Connection = Workspace.GetNewStringCalled:Connect(function(value) print(&quot;GetNewString was called:&quot;, value) Connection:Disconnect() end) Workspace:GetNewString() -- The callback above will run when calling this Copy There is still more to explore, go to the API Docs for more information!","keywords":""}]